접근지정자
public: 모든패키지 접근가능
protected: 다른패기지의 클래스가 현 클래스의 자식 클래스면 접근 가능(해당클래스, 같은패키지 클래스, 다른패키지클래스는 (세모))
default: 다른패키지는 접근 불가능, 같은 패키지 안의 모든 클래스에 접근 가능
private: 해당 클래스만 접근가능

접근지정자가 없으면 default가 생략된거

제한자
abstract: 미완성 클래스(추상메서드를 하나라도 포함하고 있으면됨), 메서드의 이름까지만 있는 메서드(추상메서드)
static:
final: 변수 앞에 붙으면 상수가됨, 메서드 앞에 붙으면 오버라이드가 불가능, 클래스명 앞에 붙으면 더이상 자식클래스를 가질 수 없다

class 클래스명{ 멤버=> 필드(변수)-변수와 상수로 구분(속성들의 집합), 메서드(행위의 집합) }
클래스(설계도) -> 속성+행위
클래스(설계도)붕어빵틀 => new연산자로 객체화 되어서 나온 애들이 그 결과(붕어빵)

is a => 상속관계  
has a => 포함관계 ( ex) car has a tire: 멤버변수로 car라는 클래스에 타이어라는 변수를 둔다 )

static non instance (클래스에서 불러올때 그냥 메서드명만 적어서 가져올 수 있음)
static(x) instance 필요 ( 객체를 생성하고 생성한 객체의 변수명.메서드 해야 가져올 수 있음)

static 객체가 생성되기 전부터 존재

객체가 생성되어지는 시점

사용관계 (메서드 호출 - 리턴)

String 클래스를 제외하고 모든 클래스는 new연산자를 붙여야 객체화가 된다.

객체 생성 안되면 null값 들어감  ex) Person(객체 생성 아직안됨 null값이 들어감
) p1(stack) = new( 멤버변수 공간이 생김 ) Person(매개변수값);

멤버변수
접근지정자    제한자      타입 변수명
        static -> 클래스가 로딩되어지는 시점에 생성됨 (객체의 생성 개수와는 무관함) 객체명.변수명   클래스명.변수명
        		    공통의 데이터를 저장할때 쓰임
        final  -> 변수명을 대문자로
멤버변수는 자동초기화됨

        
멤버변수 초기화 순서
1. 직접초기화
  ex) String name = "홍길동"; int age = 33;
2. 초기화블록  {name = "박길동"; age = 32;}

3. 생성자 메서드(많이 쓰임)
	다양한 객체를 생성해서 초기화 할 수 있음


        
        